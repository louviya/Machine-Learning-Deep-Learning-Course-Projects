import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
plt.style.use('ggplot')

#load data 
data = pd.read_table('PartD_Prescriber_PUF_NPI_17.txt')
#data.head() 
stat = data.describe()
#uData=data.drop_duplicates(['npi']) #check the duplicates

#data pre-processing
data_type = data.dtypes #check data types
num = data.iloc[:, [17,20]].astype('float64') #transform data type
for col in data.columns:   #get non-numerical column names
    if str(data[col].dtype) != 'float64':
        print(col)
#get all numerical data by dropping above column names printed
num = data.drop(['npi','nppes_provider_last_org_name','nppes_provider_first_name','nppes_provider_mi','nppes_credentials',
'nppes_provider_gender','nppes_entity_code','nppes_provider_street1','nppes_provider_street2',
'nppes_provider_city', 'nppes_provider_zip5', 'nppes_provider_zip4', 'nppes_provider_state','nppes_provider_country','specialty_description',
'description_flag', 'medicare_prvdr_enroll_status', 'ge65_suppress_flag',
'bene_count_ge65_suppress_flag','brand_suppress_flag','generic_suppress_flag','other_suppress_flag',
'mapd_suppress_flag','pdp_suppress_flag','lis_suppress_flag','nonlis_suppress_flag',
'antipsych_ge65_suppress_flag','antipsych_bene_ge65_suppress_flg'], axis=1)
stat2 = num.describe()

#calculate data question 1
beneficiaries_count = num['bene_count']>10   #select providers with more than 10 beneficiaires
num_beneficiaries = num[beneficiaries_count]
num_beneficiaries['bene_count'].head()  #check
average_beneficiaries =  num_beneficiaries['bene_count'].sum() / num_beneficiaries['bene_count'].count() #question 1 answer 158.3494585173676

#question days
average_days = num['total_day_supply'] /num['total_claim_count']
ans = average_days.median()  #29.7125748502994

#question fractions
not_suppresed = (data['brand_suppress_flag'].isnull())
providers = data[not_suppresed] #providers with information not suppressed
specialty = providers.groupby('specialty_description').agg({'brand_claim_count':'sum', 'generic_claim_count':'sum', 'other_claim_count':'sum'})
specialty['total_drug_claims'] = specialty['brand_claim_count'] + specialty['generic_claim_count'] + specialty['other_claim_count']
specialty['total_drug_claims'].head()
specialty['total_drug_claims'].dropna()
total_claims = specialty['total_drug_claims']>=1000
specialty = specialty[total_claims]
specialty['total_drug_claims'].head()
specialty['fractions'] = specialty['brand_claim_count'] / specialty['total_drug_claims']
specialty['fractions'].head()
specialty['fractions'].std() #0.09877379415202443

#question opioids
providers_opioid = data.copy()
providers_opioid['average_length'] = data['opioid_day_supply'] / data['opioid_claim_count']
providers_opioid['average_length'].head()
state_specialty = providers_opioid.groupby(['specialty_description', 'nppes_provider_state']).agg({'npi':'count',  'average_length':'sum'})
num_providers = state_specialty['npi']>100
state_specialty = state_specialty[num_providers]
state_specialty.head()
provider_specialty = providers_opioid.groupby(['specialty_description', 'nppes_provider_state']).agg({'nppes_provider_state':'count', 'average_length':'sum'})
#num_providers2 = provider_specialty['npi']>100
#provider_specialty = provider_specialty[num_providers2]
state_specialty['across_providers'] = state_specialty['average_length'] / state_specialty['npi']
provider_specialty['across_state'] = provider_specialty['average_length'] / provider_specialty['nppes_provider_state']
temp = pd.concat([provider_specialty, state_specialty], axis=1)
temp['ratios'] = temp['across_providers'] / temp['across_state']
temp['ratios'] = temp['across_state'] /temp['across_providers'] 
temp['ratios'].max()  #1.0

#question difference
ratio = data.groupby('nppes_provider_state').agg({'opioid_bene_count':'sum',  'antibiotic_bene_count':'sum'})
ratio['ratio'] = ratio['opioid_bene_count'] / ratio['antibiotic_bene_count']
maxratio = ratio['ratio'].max()
minratio = ratio['ratio'].min()
maxratio - minratio  #0.6331097230267027

#question pearson
#data['ge65_suppress_flag'].head()
providers_pear = data[['npi', 'ge65_suppress_flag', 'lis_suppress_flag', 'total_claim_count_ge65', 'total_claim_count', 'lis_claim_count']]
not_suppresed = (providers_pear['ge65_suppress_flag'].isnull())
providers_pear = providers_pear[not_suppresed]
not_suppresed2 = (providers_pear['lis_suppress_flag'].isnull())
providers_pear = providers_pear[not_suppresed2]
providers_pear['ge65'] = providers_pear['total_claim_count_ge65'] /  providers_pear['total_claim_count']
providers_pear['lis'] = providers_pear['lis_claim_count'] /  providers_pear['total_claim_count']
temp2 = pd.concat([providers_pear['ge65'], providers_pear['lis']], axis=1)
temp2.corr() #-0.638932

#2016
data2 = pd.read_table('PartD_Prescriber_PUF_NPI_16.txt')
#data.head() 
stat2 = data2.describe()


#question inflation
d17 = data[['npi', 'total_drug_cost', 'total_day_supply', 'total_claim_count_ge65', 'total_claim_count', 'lis_claim_count']]
d17['ratio17'] = data['total_drug_cost'] / data['total_day_supply']
d16 = data2[['npi', 'total_drug_cost', 'total_day_supply', 'total_claim_count_ge65', 'total_claim_count', 'lis_claim_count']]
d16['ratio16'] = data2['total_drug_cost'] / data2['total_day_supply']
temp3 = pd.concat([d17['ratio17'], d16['ratio16']], axis=1)
temp3['inflation_rate'] = (temp3['ratio17'] - temp3['ratio16']) / temp3['ratio16']
temp3['inflation_rate'].replace([np.inf, -np.inf], np.nan)
temp3['inflation_rate'].dropna().mean() #2.1962993801574537

#question last
d17spe = data[['npi', 'specialty_description']]
d17spe = d17spe.groupby('specialty_description').agg({'npi':'count'})
d16spe = data2[['npi', 'specialty_description']]
d16spe = d16spe.groupby('specialty_description').agg({'npi':'count'})
d16spe = d16spe.rename(columns={'npi': 'npi16'})
temp4 = pd.concat([d17spe, d16spe], axis=1)
num_limit = temp4['npi16']>1000
temp4 = temp4[num_limit]
temp4 = temp4.dropna()
temp4['ratio'] = (temp4['npi16'] - temp4['npi'] )/ temp4['npi16']
leave = temp4['ratio']>0
temp4 = temp4[leave]
temp4['ratio'].max() #0.10131332082551595
